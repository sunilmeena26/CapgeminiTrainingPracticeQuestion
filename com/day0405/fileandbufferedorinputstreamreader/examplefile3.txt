Introduction to Java
======================

Java is a class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is intended to let application developers Write Once and Run Anywhere (WORA),
meaning that compiled Java code can run on all platforms that support Java without the need for recompilation. Java was developed by James Gosling at Sun Microsystems Inc. in May 1995 and later acquired by Oracle Corporation and is widely used for developing applications for desktop, web, and mobile devices.
Java is known for its simplicity, robustness, and security features, making it a popular choice for enterprise-level applications. Java applications are compiled to byte code that can run on any Java Virtual Machine. The syntax of Java is similar to C/C++.
Java makes writing, compiling, and debugging programming easy. It helps to create reusable code and modular programs.




History of Java:-
=================

Java’s history is as interesting as it is impactful. The journey of this powerful programming language began in 1991 when James Gosling, Mike Sheridan, and Patrick Naughton, a team of engineers at Sun Microsystems known as the “Green Team,” set out to create a new language initially called “Oak.” Oak was later renamed Java, inspired by Java coffee, and was first publicly released in 1996 as Java 1.0. This initial version provided a no-cost runtime environment across popular platforms, making it accessible to a broad audience. Arthur Van Hoff rewrote the Java 1.0 compiler to strictly comply with its specifications, ensuring its reliability and cross-platform capabilities.
Java evolved over time, with Java 2 introducing multiple configurations tailored for different platforms, showcasing its versatility.
In 1997, Sun Microsystems aimed to formalize Java through the ISO standards body but eventually withdrew from the process.
Despite not formalizing through ISO, Sun Microsystems offered most Java implementations at no cost, earning revenue by licensing specialized products such as the Java Enterprise System.
A significant milestone in Java’s history occurred on November 13, 2006, when Sun Microsystems released a large portion of the Java Virtual Machine (JVM) as free, open-source software.
By May 8, 2007, the core JVM code was fully available under open-source distribution terms.
Java was designed with core principles: simplicity, robustness, security, high performance, portability, multi-threading, and dynamic interpretation. These principles have made Java a preferred language for various applications, including mobile devices, internet programming, gaming, and e-business.
Today, Java continues to be a cornerstone of modern software development, widely used across industries and platforms.
If you want to know more, must read – The Complete History of Java Programming Language


Key Features of Java:-
======================

1. Platform Independent
Compiler converts source code to byte code and then the JVM executes the bytecode generated by the compiler. This byte code can run on any platform be it Windows, Linux, or macOS which means if we compile a program on Windows, then we can run it on Linux and vice versa. Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of the byte code. That is why we call java a platform-independent language.

2. Object-Oriented Programming
Java is an object-oriented language, promoting the use of objects and classes. Organizing the program in the terms of a collection of objects is a way of object-oriented programming, each of which represents an instance of the class.

The four main concepts of Object-Oriented programming are:

Abstraction
Encapsulation
Inheritance
Polymorphism
3. Simplicity
Java’s syntax is simple and easy to learn, especially for those familiar with C or C++. It eliminates complex features like pointers and multiple inheritances, making it easier to write, debug, and maintain code.

4. Robustness
Java language is robust which means reliable. It is developed in such a way that it puts a lot of effort into checking errors as early as possible, that is why the java compiler is able to detect even those errors that are not easy to detect by another programming language. The main features of java that make it robust are garbage collection, exception handling, and memory allocation.

5. Security
In java, we don’t have pointers, so we cannot access out-of-bound arrays i.e it shows ArrayIndexOutOfBound Exception if we try to do so. That’s why several security flaws like stack corruption or buffer overflow are impossible to exploit in Java. Also, java programs run in an environment that is independent of the os(operating system) environment which makes java programs more secure.

6. Distributed
We can create distributed applications using the java programming language. Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in java. The java programs can be easily distributed on one or more systems that are connected to each other through an internet connection.

7. Multithreading 
Java supports multithreading, enabling the concurrent execution of multiple parts of a program. This feature is particularly useful for applications that require high performance, such as games and real-time simulations.

8. Portability  
As we know, java code written on one machine can be run on another machine. The platform-independent feature of java in which its platform-independent bytecode can be taken to any platform for execution makes java portable. WORA(Write Once Run Anywhere) makes java application to generates a ‘.class’ file that corresponds to our applications(program) but contains code in binary format. It provides ease t architecture-neutral ease as bytecode is not dependent on any machine architecture. It is the primary reason java is used in the enterprising IT industry globally worldwide.

9. High Performance
Java architecture is defined in such a way that it reduces overhead during the runtime and at some times java uses Just In Time (JIT) compiler where the compiler compiles code on-demand basis where it only compiles those methods that are called making applications to execute faster.

==========================================================================================================================================
How Java Code Executes?
The execution of a Java application code involves three main steps:

==========================================================================================================================================

How-Java-Code-Executes
How Java Code Executes

==========================================================================================================================================

1. Creating the Program
Java programs are written using a text editor or an Integrated Development Environment (IDE) like IntelliJ IDEA, Eclipse, or NetBeans. The source code is saved with a .java extension.

2. Compiling the Program
The Java compiler (javac) converts the source code into bytecode, which is stored in a .class file. This bytecode is platform-independent and can be executed on any machine with a JVM.

3. Running the Program
The JVM executes the compiled bytecode, translating it into machine code specific to the operating system and hardware.
==========================================================================================================================================

Example Program:


1
public class HelloWorld {
2
    public static void main(String[] args)
3
    {
4
        System.out.println("Hello, World!");
5
    }
6
}
==========================================================================================================================================
Write your first Java program with ‘First Java Program: Hello World‘.


Essential Java Terminologies You Need to Know
Before learning Java, one must be familiar with these common terms of Java.
==========================================================================================================================================
1. Java Virtual Machine(JVM)
The JVM is an integral part of the Java platform, responsible for executing Java bytecode. It ensures that the output of Java programs is consistent across different platforms.

Writing a program is done by a java programmer like you and me.
The compilation is done by the JAVAC compiler which is a primary Java compiler included in the Java development kit (JDK). It takes the Java program as input and generates bytecode as output.
In the Running phase of a program, JVM executes the bytecode generated by the compiler.
The Java Virtual Machine (JVM) is designed to run the bytecode generated by the Java compiler. Each operating system has its own version of the JVM, but all JVMs follow the same rules and standards. This means Java programs can run the same way on any device with a JVM, regardless of the operating system. This is why Java is called a platform-independent language.

2. Bytecode
Bytecode is the intermediate representation of Java code, generated by the Java compiler. It is platform-independent and can be executed by the JVM.

3. Java Development Kit(JDK)
While we were using the term JDK when we learn about bytecode and JVM. So, as the name suggests, it is a complete Java development kit that includes everything including compiler, Java Runtime Environment (JRE), Java Debuggers, Java Docs, etc. For the program to execute in java, we need to install JDK on our computer in order to create, compile and run the java program.

4. Java Runtime Environment (JRE)
JDK includes JRE. JRE installation on our computers allows the java program to run, however, we cannot compile it. JRE includes a browser, JVM, applet support, and plugins. For running the java program, a computer needs JRE.

5. Garbage Collector
In Java, programmers can’t delete the objects. To delete or recollect that memory JVM has a program called Garbage Collector. Garbage Collectors can recollect the objects that are not referenced. So Java makes the life of a programmer easy by handling memory management. However, programmers should be careful about their code whether they are using objects that have been used for a long time. Because Garbage cannot recover the memory of objects being referenced.

6. ClassPath
The Classpath is the file path where the java runtime and Java compiler look for .class files to load. By default, JDK provides many libraries. If you want to include external libraries they should be added to the classpath.

Basically everything in java is represented in Class as an object including the main function.


==========================================================================================================================================
Advantages of Java

Platform independent: Java code can run on any platform that has a Java Virtual Machine (JVM) installed, which means that applications can be written once and run on any device.
Object-Oriented: Java is an object-oriented programming language, which means that it follows the principles of encapsulation, inheritance, and polymorphism.
Security: Java has built-in security features that make it a secure platform for developing applications, such as automatic memory management and type checking.
Large community: Java has a large and active community of developers, which means that there is a lot of support available for learning and using the language.
Enterprise-level applications: Java is widely used for developing enterprise-level applications, such as web applications, e-commerce systems, and database systems.
Disadvantages of Java
Performance: Java can be slower compared to other programming languages, such as C++, due to its use of a virtual machine and automatic memory management.
Memory management: Java’s automatic memory management can lead to slower performance and increased memory usage, which can be a drawback for some applications.
Useful Resources:
100 Days Of Java: A Complete Guide For Beginners
7 Tips to Help You Stand Out as a Java Developer 
Conclusion
Java is a powerful and versatile programming language that’s great for beginners and experienced developers alike. By learning the basics, like what classes, objects, and methods are, you can start creating your own programs and see how Java can be used in real-world applications. Whether you’re interested in building games, mobile apps, or websites, Java provides a solid foundation to bring your ideas to life. Remember, the more you practice, the better you’ll get. Keep exploring, and soon you’ll be writing your own Java programs with confidence!

==========================================================================================================================================

Java Syntax

Java is an object-oriented programming language which is known for its simplicity, portability, and robustness. The syntax of Java programming language is very closely aligned with C and C++ which makes it easier to understand. Let’s understand the Syntax and Structure of Java Programs with a basic “Hello World” program.

Structure of Java Program
A basic Java program consists of several components that create a functional application:



1
// FileName : "GFG.java".
2
​
3
public class GFG {
4
  
5
    // Program begins with a call to main() method
6
    public static void main(String args[])
7
    {
8
      
9
          // Prints "Hello World" 
10
        System.out.println("Hello World");
11
    }
12
}

Output
Hello World

==========================================================================================================================================
Terminologies of a Basic Java Program

1. Class: The class is a blueprint (plan) of the instance of a class (object). It can be defined as a logical template that share common properties and methods.

Example 1: Blueprint of the house is class.
Example 2: In real world, Alice is an object of the “Human” class.
2. Object: The object is an instance of a class. It is an entity that has behavior and state.

Example: Dog, Cat, Monkey etc. are the object of “Animal” class.
Behavior: Running on the road.
3. Method: The behavior of an object is the method.

Example: The fuel indicator indicates the amount of fuel left in the car.
4. Instance Variables: Every object has its own unique set of instance variables. The state of an object is generally created by the values that are assigned to these instance variables.

Example: Steps to compile and run a java program in a console

javac GFG.java
java GFG
Note: When the class is public, the name of the file has to be the class name.

Java Basic Syntax
1. Comments in Java
There are three types of comments in Java.

i. Single line Comment

// System.out.println("This is an comment.");
ii. Multi-line Comment

/*
    System.out.println("This is the first line comment.");
    System.out.println("This is the second line comment.");
*/
iii. Documentation Comment. Also called a doc comment.

/** documentation */
2. Source File Name
The name of a source file should exactly match the public class name with the extension of . java. The name of the file can be a different name if it does not have any public class. Assume you have a public class GFG.

GFG.java // valid syntax
gfg.java // invalid syntax
3. Case Sensitivity
Java is a case-sensitive language, which means that the identifiers AB, Ab, aB , and ab are different in Java.

System.out.println("Hello World"); // valid syntax
system.out.println("Hello World"); // invalid syntax because of the first letter of System keyword is always uppercase. 
4. Class Names
The first letter of the class should be in Uppercase (lowercase is allowed but discouraged).
If several words are used to form the name of the class, each inner word’s first letter should be in Uppercase. Underscores are allowed, but not recommended. Also allowed are numbers and currency symbols, although the latter are also discouraged because they are used for a special purpose (for inner and anonymous classes).
class MyJavaProgram    // valid syntax
class 1Program         // invalid syntax
class My1Program       // valid syntax
class $Program         // valid syntax, but discouraged
class My$Program       // valid syntax, but discouraged (inner class Program inside the class My)
class myJavaProgram    // valid syntax, but discouraged
5. public static void main(String [] args)
The method main() is the main entry point into a Java program; this is where the processing starts. Also allowed is the signature public static void main(String… args) .

6. Method Names
All the method names should start with a lowercase letter (uppercase is also allowed but lowercase is recommended).
If several words are used to form the name of the method, then each first letter of the inner word should be in Uppercase. Underscores are allowed, but not recommended. Also allowed are digits and currency symbols.
public void employeeRecords() // valid syntax
public void EmployeeRecords() // valid syntax, but discouraged
7. Identifiers in Java
Identifiers are the names of local variables, instance and class variables, and labels, but also the names for classes, packages, modules and methods. All Unicode characters are valid, not just the ASCII subset.
All identifiers can begin with a letter, a currency symbol or an underscore ( _ ). According to the convention, a letter should be lower case for variables.
The first character of identifiers can be followed by any combination of letters, digits, currency symbols and the underscore. The underscore is not recommended for the names of variables. Constants (static final attributes and enums) should be in all Uppercase letters.
Most importantly identifiers are case-sensitive.
A keyword cannot be used as an identifier since it is a reserved word and has some special meaning.

Legal identifiers: MinNumber, total, ak74, hello_world, $amount, _under_value
Illegal identifiers: 74ak, -amount
8. White spaces in Java
A line containing only white spaces, possibly with the comment, is known as a blank line, and the Java compiler totally ignores it.

9. Access Modifiers
These modifiers control the scope of class and methods.

Access Modifiers: default, public, protected, private.
Non-access Modifiers: final, abstract, static, transient, synchronized, volatile, native.


==========================================================================================================================================
Java Operators

Java operators are special symbols that perform operations on variables or values. They can be classified into several categories based on their functionality. These operators play a crucial role in performing arithmetic, logical, relational, and bitwise operations etc.

Example: Here, we are using + and – operators.



1
// Java program to show the use of + and - operators
2
public class Geeks 
3
{  
4
    public static void main(String[] args) 
5
    {
6
  
7
      // Declare and initialize variables
8
        int num1 = 500;
9
        int num2 = 100;
10
        
11
        // Using the + (addition) operator
12
        int sum = num1 + num2;
13
        System.out.println("The Sum is: "+sum);
14
        
15
        // Using the - (subtraction) operator
16
        int diff = num1 - num2;
17
        System.out.println("The Difference is: "+diff);
18
        
19
    }
20
}

Output
The Sum is: 600
The Difference is: 400
Types of Operators in Java
Arithmetic Operators
Unary Operators
Assignment Operator
Relational Operators
Logical Operators
Ternary Operator
Bitwise Operators
Shift Operators
instance of operator
Let’s see all these operators one by one with their proper examples.
==========================================================================================================================================


1. Arithmetic Operators
Arithmetic Operators are used to perform simple arithmetic operations on primitive and non-primitive data types. 

* : Multiplication
/ : Division
% : Modulo
+ : Addition
– : Subtraction
Example:



1
// Java Program to show the use of
2
// Arithmetic Operators
3
import java.io.*;
4
​
5
class Geeks 
6
{
7
    public static void main (String[] args) 
8
    {
9
          
10
        // Arithmetic operators on integers
11
        int a = 10;
12
        int b = 3;
13
      
14
        // Arithmetic operators on Strings
15
        String n1 = "15";
16
        String n2 = "25";
17
​
18
        // Convert Strings to integers
19
        int a1 = Integer.parseInt(n1);
20
        int b1 = Integer.parseInt(n2);
21
           
22
        System.out.println("a + b = " + (a + b));
23
        System.out.println("a - b = " + (a - b));
24
        System.out.println("a * b = " + (a * b));
25
        System.out.println("a / b = " + (a / b));
26
        System.out.println("a % b = " + (a % b));
27
        System.out.println("a1 + b1 = " + (a1 + b1)); 
28
          
29
    }
30
}

Output
a + b = 13
a - b = 7
a * b = 30
a / b = 3
a % b = 1
a1 + b1 = 40

2. Unary Operators
Unary Operators need only one operand. They are used to increment, decrement, or negate a value. 

- , Negates the value.
+ , Indicates a positive value (automatically converts byte, char, or short to int).
++ , Increments by 1.
Post-Increment: Uses value first, then increments.
Pre-Increment: Increments first, then uses value.
-- , Decrements by 1.
Post-Decrement: Uses value first, then decrements.
Pre-Decrement: Decrements first, then uses value.
! , Inverts a boolean value.
Example:



1
// Java Program to show the use of
2
// Unary Operators
3
import java.io.*;
4
​
5
// Driver Class
6
class Geeks {
7
      // main function
8
    public static void main(String[] args)
9
    {
10
        // Interger declared
11
        int a = 10;
12
        int b = 10;
13
​
14
        // Using unary operators
15
        System.out.println("Postincrement : " + (a++));
16
        System.out.println("Preincrement : " + (++a));
17
​
18
        System.out.println("Postdecrement : " + (b--));
19
        System.out.println("Predecrement : " + (--b));
20
    }
21
}

Output
Postincrement : 10
Preincrement : 12
Postdecrement : 10
Predecrement : 8
3. Assignment Operator
 ‘=’ Assignment operator is used to assign a value to any variable. It has right-to-left associativity, i.e. value given on the right-hand side of the operator is assigned to the variable on the left, and therefore right-hand side value must be declared before using it or should be a constant. 

The general format of the assignment operator is:

variable = value; 


In many cases, the assignment operator can be combined with others to create shorthand compound statements. For example, a += 5 replaces a = a + 5. Common compound operators include:

+= , Add and assign.
-= , Subtract and assign.
*= , Multiply and assign.
/= , Divide and assign.
%= , Modulo and assign.
Example:



1
// Java Program to show the use of
2
// Assignment Operators
3
import java.io.*;
4
​
5
// Driver Class
6
class Geeks {
7
    // Main Function
8
    public static void main(String[] args)
9
    {
10
        
11
        // Assignment operators
12
        int f = 7;
13
        System.out.println("f += 3: " + (f += 3));
14
        System.out.println("f -= 2: " + (f -= 2));
15
        System.out.println("f *= 4: " + (f *= 4));
16
        System.out.println("f /= 3: " + (f /= 3));
17
        System.out.println("f %= 2: " + (f %= 2));
18
        System.out.println("f &= 0b1010: " + (f &= 0b1010));
19
        System.out.println("f |= 0b1100: " + (f |= 0b1100));
20
        System.out.println("f ^= 0b1010: " + (f ^= 0b1010));
21
        System.out.println("f <<= 2: " + (f <<= 2));
22
        System.out.println("f >>= 1: " + (f >>= 1));
23
        System.out.println("f >>>= 1: " + (f >>>= 1));
24
    }
25
}

Output
f += 3: 10
f -= 2: 8
f *= 4: 32
f /= 3: 10
f %= 2: 0
f &= 0b1010: 0
f |= 0b1100: 12
f ^= 0b1010: 6
f <<= 2: 24
f >>= 1: 12
f >>>= 1: 6
4. Relational Operators
Relational Operators are used to check for relations like equality, greater than, and less than. They return boolean results after the comparison and are extensively used in looping statements as well as conditional if-else statements. The general format is , 

variable relation_operator value 


Relational operators compare values and return boolean results:

== , Equal to.
!= , Not equal to.
< , Less than.
<= , Less than or equal to.
> , Greater than.
>= , Greater than or equal to.
Example:



1
// Java Program to show the use of
2
// Relational Operators
3
import java.io.*;
4
​
5
// Driver Class
6
class Geeks {
7
    // main function
8
    public static void main(String[] args)
9
    {
10
        // Comparison operators
11
        int a = 10;
12
        int b = 3;
13
        int c = 5;
14
​
15
        System.out.println("a > b: " + (a > b));
16
        System.out.println("a < b: " + (a < b));
17
        System.out.println("a >= b: " + (a >= b));
18
        System.out.println("a <= b: " + (a <= b));
19
        System.out.println("a == c: " + (a == c));
20
        System.out.println("a != c: " + (a != c));
21
    }
22
}

Output
a > b: true
a < b: false
a >= b: true
a <= b: false
a == c: false
a != c: true
5. Logical Operators
Logical Operators are used to perform “logical AND” and “logical OR” operations, similar to AND gate and OR gate in digital electronics. They have a short-circuiting effect, meaning the second condition is not evaluated if the first is false.

Conditional operators are:

&&, Logical AND: returns true when both conditions are true.
||, Logical OR: returns true if at least one condition is true.
!, Logical NOT: returns true when a condition is false and vice-versa
Example:



1
// Java Program to show the use of
2
// Logical operators
3
import java.io.*;
4
​
5
class Geeks {
6
  
7
      // Main Function
8
    public static void main (String[] args) {
9
      
10
        // Logical operators
11
        boolean x = true;
12
        boolean y = false;
13
      
14
        System.out.println("x && y: " + (x && y));
15
        System.out.println("x || y: " + (x || y));
16
        System.out.println("!x: " + (!x));
17
    }
18
}

Output
x && y: false
x || y: true
!x: false
6. Ternary operator
The Ternary Operator is a shorthand version of the if-else statement. It has three operands and hence the name Ternary. The general format is ,

condition ? if true : if false 


The above statement means that if the condition evaluates to true, then execute the statements after the ‘?’ else execute the statements after the ‘:’.  

Example:



1
// Java program to illustrate
2
// max of three numbers using
3
// ternary operator.
4
​
5
public class Geeks {
6
  
7
    public static void main(String[] args)
8
    {
9
        int a = 20, b = 10, c = 30, result;
10
​
11
        // result holds max of three
12
        // numbers
13
        result = ((a > b) ? (a > c) ? a : c : (b > c) ? b : c);
14
        System.out.println("Max of three numbers = "+ result);
15
    }
16
}

Output
Max of three numbers = 30
7. Bitwise Operators
Bitwise Operators are used to perform the manipulation of individual bits of a number and with any of the integer types. They are used when performing update and query operations of the Binary indexed trees. 

& (Bitwise AND) – returns bit-by-bit AND of input values.
| (Bitwise OR) – returns bit-by-bit OR of input values.
^ (Bitwise XOR) – returns bit-by-bit XOR of input values.
~ (Bitwise Complement) – inverts all bits (one’s complement).
Example:



1
// Java Program to show the use of
2
// bitwise operators
3
import java.io.*;
4
​
5
class Geeks 
6
{
7
    public static void main(String[] args)
8
    {
9
        // Bitwise operators
10
        int d = 0b1010;
11
        int e = 0b1100;
12
      
13
        System.out.println("d & e : " + (d & e));
14
        System.out.println("d | e : " + (d | e));
15
        System.out.println("d ^ e : " + (d ^ e));
16
        System.out.println("~d : " + (~d));
17
        System.out.println("d << 2 : " + (d << 2));
18
        System.out.println("e >> 1 : " + (e >> 1));
19
        System.out.println("e >>> 1 : " + (e >>> 1));
20
    }
21
}

Output
d & e : 8
d | e : 14
d ^ e : 6
~d : -11
d << 2 : 40
e >> 1 : 6
e >>> 1 : 6
8. Shift Operators
Shift Operators are used to shift the bits of a number left or right, thereby multiplying or dividing the number by two, respectively. They can be used when we have to multiply or divide a number by two. The general format , 

 number shift_op number_of_places_to_shift; 


<< (Left shift) – Shifts bits left, filling 0s (multiplies by a power of two).
>> (Signed right shift) – Shifts bits right, filling 0s (divides by a power of two), with the leftmost bit depending on the sign.
>>> (Unsigned right shift) – Shifts bits right, filling 0s, with the leftmost bit always 0.
Example:



1
// Java Program to show the use of
2
// shift operators
3
import java.io.*;
4
​
5
class Geeks 
6
{
7
    public static void main(String[] args)
8
    {
9
        int a = 10;
10
    
11
        // Using left shift
12
        System.out.println("a<<1 : " + (a << 1));
13
      
14
        // Using right shift
15
        System.out.println("a>>1 : " + (a >> 1));
16
    }
17
}

Output
a<<1 : 20
a>>1 : 5
9. instanceof operator
The instance of operator is used for type checking. It can be used to test if an object is an instance of a class, a subclass, or an interface. The general format ,  

object instance of class/subclass/interface 




1
// Java program to show the use of
2
// Instance of operator
3
public class Geeks 
4
{
5
    public static void main(String[] args)
6
    {
7
​
8
        Person obj1 = new Person();
9
        Person obj2 = new Boy();
10
​
11
        // As obj is of type person, it is not an
12
        // instance of Boy or interface
13
        System.out.println("obj1 instanceof Person: "
14
                           + (obj1 instanceof Person));
15
        System.out.println("obj1 instanceof Boy: "
16
                           + (obj1 instanceof Boy));
17
        System.out.println("obj1 instanceof MyInterface: "
18
                           + (obj1 instanceof MyInterface));
19
​
20
        // Since obj2 is of type boy,
21
        // whose parent class is person
22
        // and it implements the interface Myinterface
23
        // it is instance of all of these classes
24
        System.out.println("obj2 instanceof Person: "
25
                           + (obj2 instanceof Person));
26
        System.out.println("obj2 instanceof Boy: "
27
                           + (obj2 instanceof Boy));
28
        System.out.println("obj2 instanceof MyInterface: "
29
                           + (obj2 instanceof MyInterface));
30
    }
31
}
32
​
33
// Classes and Interfaces used
34
// are declared here
35
class Person {
36
}
37
​
38
class Boy extends Person implements MyInterface {
39
}
40
​
41
interface MyInterface {
42
}

Output
obj1 instanceof Person: true
obj1 instanceof Boy: false
obj1 instanceof MyInterface: false
obj2 instanceof Person: true
obj2 instanceof Boy: true
obj2 instanceof MyInterface: true
Precedence and Associativity of Java Operators
Precedence and associative rules are used when dealing with hybrid equations involving more than one type of operator. In such cases, these rules determine which part of the equation to consider first, as there can be many different valuations for the same equation. The below table depicts the precedence of operators in decreasing order as magnitude, with the top representing the highest precedence and the bottom showing the lowest precedence.

Java-Operators


Interesting Questions About Java Operators 
1. Precedence and Associativity
There is often confusion when it comes to hybrid equations which are equations having multiple operators. The problem is which part to solve first. There is a golden rule to follow in these situations. If the operators have different precedence, solve the higher precedence first. If they have the same precedence, solve according to associativity, that is, either from right to left or from left to right. The explanation of the below program is well written in comments within the program itself.



1
public class GFG
2
{
3
    public static void main(String[] args)
4
    {
5
        int a = 20, b = 10, c = 0;
6
          int d = 20, e = 40, f = 30;
7
​
8
        // precedence rules for arithmetic operators.
9
        // (* = / = %) > (+ = -)
10
        // prints a+(b/d)
11
        System.out.println("a+b/d = " + (a + b / d));
12
​
13
        // if same precedence then associative
14
        // rules are followed.
15
        // e/f -> b*d -> a+(b*d) -> a+(b*d)-(e/f)
16
        System.out.println("a+b*d-e/f = "
17
                           + (a + b * d - e / f));
18
    }
19
}

Output
a+b/d = 20
a+b*d-e/f = 219
2. Be a Compiler
The compiler in our systems uses a lex tool to match the greatest match when generating tokens. This creates a bit of a problem if overlooked. For example, consider the statement a=b+++c; too many of the readers might seem to create a compiler error. But this statement is absolutely correct as the token created by lex is a, =, b, ++, +, c. Therefore, this statement has a similar effect of first assigning b+c to a and then incrementing b. Similarly, a=b+++++c; would generate an error as the tokens generated are a, =, b, ++, ++, +, c. which is actually an error as there is no operand after the second unary operand.



1
public class GFG 
2
{
3
    public static void main(String[] args)
4
    {
5
        int a = 20, b = 10, c = 0;
6
​
7
        // a=b+++c is compiled as
8
        // b++ +c
9
        // a=b+c then b=b+1
10
        a = b++ + c;
11
      
12
        System.out.println("Value of a(b+c), "
13
                           + " b(b+1), c = " + a + ", " + b
14
                           + ", " + c);
15
​
16
        // a=b+++++c is compiled as
17
        // b++ ++ +c
18
        // which gives error.
19
        // a=b+++++c;
20
        // System.out.println(b+++++c);
21
    }
22
}

Output
Value of a(b+c),  b(b+1), c = 10, 11, 0
3. Using + over ()
When using the + operator inside system.out.println() make sure to do addition using parenthesis. If we write something before doing addition, then string addition takes place, that is, associativity of addition is left to right, and hence integers are added to a string first producing a string, and string objects concatenate when using +. Therefore it can create unwanted results.



1
public class GFG 
2
{
3
    public static void main(String[] args)
4
    {
5
        int x = 5, y = 8;
6
​
7
        // concatenates x and y as
8
        // first x is added to "concatenation (x+y) = "
9
        // producing "concatenation (x+y) = 5"
10
        // and then 8 is further concatenated.
11
        System.out.println("Concatenation (x+y) = " + x + y);
12
​
13
        // addition of x and y
14
        System.out.println("Addition (x+y) = " + (x + y));
15
    }
16
}
Try it on GfG Practice
redirect icon

Output
Concatenation (x+y)= 58
Addition (x+y) = 13
Advantages of Operators
The advantages of using operators in Java are mentioned below:

Expressiveness: Operators in Java provide a concise and readable way to perform complex calculations and logical operations.
Time-Saving: Operators in Java save time by reducing the amount of code required to perform certain tasks.
Improved Performance: Using operators can improve performance because they are often implemented at the hardware level, making them faster than equivalent Java code.
Disadvantages of Operators
The disadvantages of Operators in Java are mentioned below:

Operator Precedence: Operators in Java have a defined precedence, which can lead to unexpected results if not used properly.
Type Coercion: Java performs implicit type conversions when using operators, which can lead to unexpected results or errors if not used properly.


==========================================================================================================================================